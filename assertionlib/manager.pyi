import os
import sys
import types
import reprlib
import inspect
import builtins
from typing import (
    Any,
    Callable,
    FrozenSet,
    Optional,
    Type,
    TypeVar,
    Tuple,
    Dict,
    Union,
    Sized,
    SupportsFloat,
    SupportsInt,
    SupportsAbs,
    Sequence,
    Mapping,
    Container,
    ClassVar,
    Iterable,
    NoReturn,
    Generic,
    type_check_only,
    overload
)

import numpy as np

from .dataclass import AbstractDataClass, _MetaADC

if sys.version_info >= (3, 8):
    from typing import Final, Protocol, SupportsIndex as _SupportsIndex
else:
    from typing_extensions import Final, Protocol

    @type_check_only
    class _SupportsIndex(Protocol):
        def __index__(self) -> int:
            pass

@type_check_only
class _SupportsShape(Protocol):
    shape: Tuple[int, ...]

@type_check_only
class _SupportsCode(Protocol):
    __code__: types.CodeType

T = TypeVar('T')
KT = TypeVar('KT')
VT = TypeVar('VT')
ST = TypeVar('ST', bound=Sequence)

class _MetaAM(_MetaADC):
    EXCLUDE: FrozenSet[str] = ...
    INCLUDE: FrozenSet[Callable] = ...

class _Str(Generic[T]):
    value: T = ...
    def __init__(self, value: T) -> None: ...

class _NoneException(Exception): ...

class AssertionManager(AbstractDataClass, metaclass=_MetaAM):
    repr_instance: Optional[reprlib.Repr]
    _repr_fallback: Callable[[Any], str]
    _maxstring_fallback: int

    def __init__(self, repr_instance: Optional[reprlib.Repr] = ...) -> None: ...
    @property
    def repr(self) -> Callable[[Any], str]: ...
    @property
    def maxstring(self) -> int: ...

    @overload
    def assert_(self, __func: Callable[..., T], *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[T], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def assert_(self, __func: Callable[..., T], *args: Any, exception: Optional[Type[Exception]] = ..., invert: builtins.bool = ..., post_process: Optional[Callable[[T], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    def __call__(self, value: T, invert: builtins.bool = ..., post_process: Optional[Callable[[T], Any]] = ..., message: Optional[str] = ...) -> None: ...
    def add_to_instance(self, func: Callable[..., Any], name: Optional[str] = ..., override_attr: builtins.bool = ...) -> None: ...
    def _get_exc_message(self, __ex: Exception, __func: Callable, *args: Any, invert: bool = ..., output: Any = ..., post_process: Optional[Callable[[Any], Any]] = ..., **kwargs: Any) -> str: ...
    @staticmethod
    def _get_exc_signature(signature: inspect.Signature, args: Sequence[str], kwargs: Mapping[str, Any] = ...) -> inspect.Signature: ...
    def _get_prm_description(self, key: str, value: Any) -> str: ...

    # operators

    @overload
    def abs(self, __a: SupportsAbs[T], *, invert: builtins.bool = ..., post_process: Optional[Callable[[T], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def abs(self, __a: SupportsAbs[T], *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[T], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def abs(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def abs(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def add(self, __a: Any, __b: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def add(self, __a: Any, __b: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def add(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def add(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def and_(self, __a: Any, __b: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def and_(self, __a: Any, __b: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def and_(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def and_(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def concat(self, __a: Sequence[T], __b: Sequence[T], *, invert: builtins.bool = ..., post_process: Optional[Callable[[Sequence[T]], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def concat(self, __a: Sequence[T], __b: Sequence[T], *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[Sequence[T]], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def concat(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def concat(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def contains(self, __a: Container[Any], __b: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def contains(self, __a: Container[Any], __b: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def contains(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def contains(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def countOf(self, __a: Container[Any], __b: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[int], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def countOf(self, __a: Container[Any], __b: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[int], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def countOf(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def countOf(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def eq(self, __a: Any, __b: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def eq(self, __a: Any, __b: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def eq(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def eq(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def floordiv(self, __a: Any, __b: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def floordiv(self, __a: Any, __b: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def floordiv(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def floordiv(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def ge(self, __a: Any, __b: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def ge(self, __a: Any, __b: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def ge(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def ge(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def getitem(self, __a: Sequence[T], __b: _SupportsIndex, *, invert: builtins.bool = ..., post_process: Optional[Callable[[T], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def getitem(self, __a: ST, __b: slice, *, invert: builtins.bool = ..., post_process: Optional[Callable[[ST], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def getitem(self, __a: Mapping[KT, VT], __b: KT, *, invert: builtins.bool = ..., post_process: Optional[Callable[[VT], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def getitem(self, __a: Sequence[T], __b: _SupportsIndex, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[T], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def getitem(self, __a: ST, __b: slice, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[ST], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def getitem(self, __a: Mapping[KT, VT], __b: KT, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[VT], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def getitem(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def getitem(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def gt(self, __a: Any, __b: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def gt(self, __a: Any, __b: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def gt(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def gt(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def index(self, __a: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[int], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def index(self, __a: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[int], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def index(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def index(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def indexOf(self, __a: Sequence[T], __b: T, *, invert: builtins.bool = ..., post_process: Optional[Callable[[int], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def indexOf(self, __a: Sequence[T], __b: T, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[int], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def indexOf(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def indexOf(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def inv(self, __a: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def inv(self, __a: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def inv(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def inv(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def invert(self, __a: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def invert(self, __a: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def invert(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def invert(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def is_(self, __a: Any, __b: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def is_(self, __a: Any, __b: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def is_(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def is_(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def is_not(self, __a: Any, __b: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def is_not(self, __a: Any, __b: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def is_not(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def is_not(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def le(self, __a: Any, __b: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def le(self, __a: Any, __b: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def le(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def le(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def lshift(self, __a: Any, __b: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def lshift(self, __a: Any, __b: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def lshift(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def lshift(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def lt(self, __a: Any, __b: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def lt(self, __a: Any, __b: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def lt(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def lt(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def matmul(self, __a: Any, __b: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def matmul(self, __a: Any, __b: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def matmul(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def matmul(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def mod(self, __a: Any, __b: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def mod(self, __a: Any, __b: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def mod(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def mod(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def mul(self, __a: Any, __b: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def mul(self, __a: Any, __b: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def mul(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def mul(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def ne(self, __a: Any, __b: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def ne(self, __a: Any, __b: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def ne(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def ne(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def neg(self, __a: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def neg(self, __a: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def neg(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def neg(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def not_(self, __a: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def not_(self, __a: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def not_(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def not_(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def or_(self, __a: Any, __b: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def or_(self, __a: Any, __b: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def or_(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def or_(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def pos(self, __a: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def pos(self, __a: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def pos(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def pos(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def pow(self, __a: Any, __b: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def pow(self, __a: Any, __b: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def pow(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def pow(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def rshift(self, __a: Any, __b: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def rshift(self, __a: Any, __b: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def rshift(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def rshift(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def sub(self, __a: Any, __b: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def sub(self, __a: Any, __b: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def sub(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def sub(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def truediv(self, __a: Any, __b: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def truediv(self, __a: Any, __b: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def truediv(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def truediv(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def truth(self, __a: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def truth(self, __a: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def truth(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def truth(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    # builtins

    @overload
    def callable(self, __obj: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def callable(self, __obj: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def callable(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def callable(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def isinstance(self, __obj: Any, __class_or_tuple: Union[type, Tuple[type, ...]], *, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def isinstance(self, __obj: Any, __class_or_tuple: Union[type, Tuple[type, ...]], *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def isinstance(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def isinstance(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def issubclass(self, __cls: type, __class_or_tuple: Union[type, Tuple[type, ...]], *, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def issubclass(self, __cls: type, __class_or_tuple: Union[type, Tuple[type, ...]], *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def issubclass(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def issubclass(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def bool(self, __o: Any, *, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def bool(self, __o: Any, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def bool(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def bool(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def hasattr(self, __obj: Any, name: str, *, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def hasattr(self, __obj: Any, name: str, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def hasattr(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def hasattr(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def len(self, __obj: Sized, *, invert: builtins.bool = ..., post_process: Optional[Callable[[int], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def len(self, __obj: Sized, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[int], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def len(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def len(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def any(self, __obj: Iterable[Any], *, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def any(self, __obj: Iterable[Any], *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def any(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def any(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def all(self, __obj: Iterable[Any], *, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def all(self, __obj: Iterable[Any], *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def all(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def all(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    # os

    @overload
    def isabs(self, __s: Union[str, bytes, os.PathLike], *, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def isabs(self, __s: Union[str, bytes, os.PathLike], *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def isabs(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def isabs(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def islink(self, __path: Union[str, bytes, os.PathLike], *, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def islink(self, __path: Union[str, bytes, os.PathLike], *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def islink(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def islink(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def ismount(self, __path: Union[str, bytes, os.PathLike], *, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def ismount(self, __path: Union[str, bytes, os.PathLike], *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def ismount(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def ismount(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def isdir(self, __s: Union[str, bytes, os.PathLike], *, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def isdir(self, __s: Union[str, bytes, os.PathLike], *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def isdir(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def isdir(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def isfile(self, __path: Union[str, bytes, os.PathLike], *, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def isfile(self, __path: Union[str, bytes, os.PathLike], *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def isfile(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def isfile(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    # math

    @overload
    def isinf(self, __x: SupportsFloat, *, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def isinf(self, __x: SupportsFloat, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def isinf(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def isinf(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def isnan(self, __x: SupportsFloat, *, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def isnan(self, __x: SupportsFloat, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def isnan(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def isnan(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def isfinite(self, __x: SupportsFloat, *, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def isfinite(self, __x: SupportsFloat, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def isfinite(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def isfinite(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def isclose(self, __a: SupportsFloat, __b: SupportsFloat, *, rel_tol: SupportsFloat = ..., abs_tol: SupportsFloat = ..., invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def isclose(self, __a: SupportsFloat, __b: SupportsFloat, *, exception: None, rel_tol: SupportsFloat = ..., abs_tol: SupportsFloat = ..., invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def isclose(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def isclose(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def allclose(self, __a: SupportsFloat, __b: SupportsFloat, *, rel_tol: SupportsFloat = ..., abs_tol: SupportsFloat = ..., invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def allclose(self, __a: SupportsFloat, __b: SupportsFloat, *, exception: None, rel_tol: SupportsFloat = ..., abs_tol: SupportsFloat = ..., invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def allclose(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def allclose(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    # misc

    @overload
    def shape_eq(self, __a: _SupportsShape, __b: Union[_SupportsShape, Tuple[int, ...]], *, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def shape_eq(self, __a: _SupportsShape, __b: Union[_SupportsShape, Tuple[int, ...]], *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def shape_eq(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def shape_eq(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def len_eq(self, __a: Sized, __b: SupportsInt, *, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def len_eq(self, __a: Sized, __b: SupportsInt, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def len_eq(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def len_eq(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def str_eq(self, __a: T, __b: str, *, str_converter: Callable[[T], str] = ..., invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def str_eq(self, __a: T, __b: str, *, str_converter: Callable[[T], str] = ..., exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def str_eq(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def str_eq(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

    @overload
    def function_eq(self, __func1: _SupportsCode, __func2: _SupportsCode, *, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def function_eq(self, __func1: _SupportsCode, __func2: _SupportsCode, *, exception: None, invert: builtins.bool = ..., post_process: Optional[Callable[[builtins.bool], Any]] = ..., message: Optional[str] = ...) -> None: ...
    @overload
    def function_eq(self, *args: Any, exception: Type[AssertionError], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> NoReturn: ...
    @overload
    def function_eq(self, *args: Any, exception: Type[Exception], invert: builtins.bool = ..., post_process: Optional[Callable[[Any], Any]] = ..., message: Optional[str] = ..., **kwargs: Any) -> None: ...

assertion: Final[AssertionManager]
